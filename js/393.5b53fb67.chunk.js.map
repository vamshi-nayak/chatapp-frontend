{"version":3,"file":"static/js/393.5b53fb67.chunk.js","mappings":"0JAqBIA,EAAQC,E,2GCrBCC,EAAY,SAACC,EAAYC,GAGpC,OAAOA,EAAM,GAAGC,MAAQF,EAAWE,IAAMD,EAAM,GAAGE,KAAOF,EAAM,GAAGE,MAUvDC,EAAqB,SAACC,EAAUC,EAAGC,EAAGC,GAGjD,OACED,EAAIF,EAASI,OAAS,GACtBJ,EAASE,EAAI,GAAGG,OAAOR,MAAQI,EAAEI,OAAOR,KACxCG,EAASE,GAAGG,OAAOR,MAAQM,EAEpB,GAEND,EAAIF,EAASI,OAAS,GACrBJ,EAASE,EAAI,GAAGG,OAAOR,MAAQI,EAAEI,OAAOR,KACxCG,EAASE,GAAGG,OAAOR,MAAQM,GAC5BD,IAAMF,EAASI,OAAS,GAAKJ,EAASE,GAAGG,OAAOR,MAAQM,EAElD,EACG,QAIDG,EAAa,SAACN,EAAUC,EAAGC,GACtC,OAAOA,EAAI,GAAKF,EAASE,EAAI,GAAGG,OAAOR,MAAQI,EAAEI,OAAOR,KAI7CU,EAAe,SAACP,EAAUC,EAAGC,EAAGC,GAC3C,OACED,EAAIF,EAASI,OAAS,IACrBJ,EAASE,EAAI,GAAGG,OAAOR,MAAQI,EAAEI,OAAOR,UACRW,IAA/BR,EAASE,EAAI,GAAGG,OAAOR,MACzBG,EAASE,GAAGG,OAAOR,MAAQM,GAGlBM,EAAgB,SAACT,EAAUE,EAAGC,GACzC,OACED,IAAMF,EAASI,OAAS,GACxBJ,EAASA,EAASI,OAAS,GAAGC,OAAOR,MAAQM,GAC7CH,EAASA,EAASI,OAAS,GAAGC,OAAOR,K,mBC3BzC,EAnBoB,WAClB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAUa,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,UACjB,SAAC,KAAD,CAAUA,OAAO,a,4DCMvB,EArBsB,SAAC,GAAoC,EAAlCC,MAAmC,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,eACpC,OACE,UAAC,KAAD,CACEC,GAAI,EACJC,GAAI,EACJC,aAAa,KACbf,EAAG,EACHgB,GAAI,EACJC,QAAQ,QACRC,SAAU,GACVC,YAAY,SACZC,OAAO,UACPC,QAAST,EAVX,UAYGD,EAAKd,MAEN,SAAC,KAAD,CAAWyB,GAAI,Q,UCerB,EA9BqB,SAAC,GAA6B,IAA5BX,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,eAG3B,OACE,UAAC,KAAD,CACES,QAAST,EACTQ,OAAO,UACPG,GAAG,UACHC,OAAQ,CACNC,WAAY,UACZC,MAAO,SAETC,EAAE,OACFC,EAAE,OACFC,WAAW,SACXH,MAAM,QACNb,GAAI,EACJC,GAAI,EACJE,GAAI,EACJD,aAAa,KAff,WAiBE,SAAC,KAAD,CAAQe,GAAI,EAAGC,KAAK,KAAKX,OAAO,UAAUvB,KAAMc,EAAKd,QACrD,UAAC,KAAD,YACE,SAAC,KAAD,UAAOc,EAAKd,QACZ,UAAC,KAAD,CAAMqB,SAAS,KAAf,eAAqB,oCAArB,IAAsCP,EAAKqB,MAA3C,cCmLR,EA1LuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAExB,GAA0CC,EAAAA,EAAAA,YAA1C,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAwCN,EAAAA,EAAAA,UAAS,IAAjD,eAAOO,EAAP,KAAqBC,EAArB,KACA,GAA8BR,EAAAA,EAAAA,WAAS,GAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KAEA,GAAkCC,EAAAA,EAAAA,YAAWC,EAAAA,GAArCnC,EAAR,EAAQA,KAAMoC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SACfC,GAAQC,EAAAA,EAAAA,MACd,GAAoCC,EAAAA,EAAAA,MAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAmBlBC,EAAY,mCAAG,WAAOC,GAAP,8EAEnBhB,EAAUgB,GACLA,EAHc,iEAQjBZ,GAAW,GACLa,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYhD,EAAKiD,SAV1B,SAaMC,IAAAA,IAAA,2BAA8BtB,GAAUkB,GAb9C,gBAaTK,EAbS,EAaTA,KACRC,QAAQC,IAAIF,EAAM,qCAElBlB,GAAW,GACXF,EAAgBoB,GAjBC,kDAqBjBC,QAAQE,MAAM,KAAMC,SACpBjB,EAAM,CACJkB,MAAO,iBACPC,YAAa,oCACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBA5BK,0DAAH,sDAqCZC,EAAa,mCAAG,2FAEftC,GAAkBE,EAFH,uBAGlBY,EAAM,CACJkB,MAAO,6BACPE,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QARM,0CAcZf,EAAS,CACbC,QAAS,CAA2CC,cAAc,UAAD,OAAYhD,EAAKiD,SAflE,SAkBKC,IAAAA,KAAA,kBAErB,CACEhE,KAAMsC,EACNxC,MAAO+E,KAAKC,UAAUtC,EAAcuC,KAAI,SAACC,GAAD,OAAkBA,EAAajF,SAGzE6D,GAzBgB,gBAkBVK,EAlBU,EAkBVA,KAURd,EAAS,CAACc,GAAF,eAAWf,KACnBgB,QAAQC,IAAIF,EAAM,sCAClBR,IAEAL,EAAM,CACJkB,MAAO,0BACPE,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WArCM,kDA0ClBT,QAAQE,MAAM,KAAMC,SACpBjB,EAAM,CACJkB,MAAO,6BACPC,YAAa,KAAMU,SAAShB,KAC5BO,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAjDM,0DAAH,qDAsDnB,OACE,UAAC,WAAD,YACE,iBAAMnD,QAASgC,EAAf,SAAwBpB,KAExB,UAAC,KAAD,CAAOqB,QAASA,EAASF,OAAQA,EAAQ2B,YAAU,EAAnD,WACE,SAAC,KAAD,KACA,UAAC,KAAD,YACE,SAAC,KAAD,CACE7D,SAAS,OACT8D,WAAW,YACXpD,EAAE,OACFqD,eAAe,SAJjB,gCAQA,SAAC,KAAD,KACA,UAAC,KAAD,CAAWrD,EAAE,OAAOsD,QAAQ,SAASrD,WAAW,SAAhD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEsD,YAAY,YACZnE,GAAI,EACJoE,SAAU,SAACC,GAAD,OAAOjD,EAAiBiD,EAAEC,OAAOC,aAG/C,SAAC,KAAD,WACE,SAAC,KAAD,CACEJ,YAAY,sCACZnE,GAAI,EACJoE,SAAU,SAACC,GAAD,OAAO9B,EAAa8B,EAAEC,OAAOC,aAG3C,SAAC,KAAD,CAAK5D,EAAE,OAAOC,EAAE,OAAO4D,SAAS,OAAhC,SACGnD,EAAcuC,KAAI,SAACC,GAAD,OACjB,SAAC,EAAD,CAEElE,KAAMkE,EACNjE,eAAgB,kBA9FV6E,EA8F6BZ,OA7FjDvC,EAAiBD,EAAcqD,QAAO,SAACb,GAAD,OAAkBA,EAAajF,MAAQ6F,EAAQ7F,QADlE,IAAC6F,IA4FDZ,EAAajF,UAMvB+C,GAEC,wCAFM,OAINF,QAJM,IAINA,OAJM,EAINA,EACIkD,MAAM,EAAG,GACVf,KAAI,SAACjE,GAAD,OACH,SAAC,EAAD,CAEEA,KAAMA,EACNC,eAAgB,kBA7JJgF,EA6J+BjF,OA3JvD0B,EAAcwD,SAASD,GACzB3C,EAAM,CACJkB,MAAO,qBACPE,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAKdlC,EAAiB,GAAD,eAAKD,GAAL,CAAoBuD,MAbT,IAACA,IA2JPjF,EAAKf,YAOpB,SAAC,KAAD,WACE,SAAC,KAAD,CAAQyB,QAASoD,EAAetD,YAAY,OAA5C,qCCxEZ,EAjHgB,SAAC,GAAoB,IAAlB2E,EAAiB,EAAjBA,WACjB,GAAoC5D,EAAAA,EAAAA,YAApC,eAAOxC,EAAP,KAAmBqG,EAAnB,KAEA,GAAiElD,EAAAA,EAAAA,YAAWC,EAAAA,GAApEkD,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBtF,EAAvC,EAAuCA,KAAMoC,EAA7C,EAA6CA,MAAOC,EAApD,EAAoDA,SAG9CC,GAAQC,EAAAA,EAAAA,MAERgD,EAAU,mCAAG,wGAGTzC,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYhD,EAAKiD,SAJ5B,SAOQC,IAAAA,IAAU,YAAaJ,GAP/B,gBAOPK,EAPO,EAOPA,KACRd,EAASc,GACTC,QAAQC,IAAIF,EAAM,wCATH,kDAafC,QAAQC,IAAI,KAAME,SAClBjB,EAAM,CACJkB,MAAO,iBACPC,YAAa,2BACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBApBG,0DAAH,qDAmChB,OARA2B,EAAAA,EAAAA,YAAU,WACRJ,EAAcrB,KAAK0B,MAAMC,aAAaC,QAAQ,qBAC9CJ,MAEC,CAACJ,KAKF,UAAC,KAAD,CACElE,EAAG,CAAE2E,KAAMP,EAAe,OAAS,OAAQQ,GAAI,QAC/CtB,QAAQ,SACRrD,WAAW,SACX4E,EAAG,EACHlF,GAAG,QACHI,EAAG,CAAE4E,KAAM,OAAQC,GAAI,OACvBzF,aAAa,KACb2F,YAAY,MARd,WAUE,UAAC,KAAD,CACEC,GAAI,EACJ9F,GAAI,EACJK,SAAU,CAAEqF,KAAM,OAAQC,GAAI,QAC9BxB,WAAW,YACXpD,EAAE,OACFD,EAAE,OACFsD,eAAe,gBACfpD,WAAW,SARb,sBAWE,SAAC,EAAD,WACE,SAAC,KAAD,CACED,EAAE,OACFV,SAAU,CAAEqF,KAAM,OAAQC,GAAI,OAAQI,GAAI,QAC1CC,WAAW,SAAC,KAAD,IAHb,kCASJ,SAAC,KAAD,CACEjF,EAAE,OACFsD,QAAQ,SACRuB,EAAG,EACHlF,GAAG,UACHI,EAAE,OACFmF,EAAE,OACF/F,aAAa,KACbgG,UAAU,SARZ,SAUGhE,GACC,SAAC,KAAD,CAAOgE,UAAU,SAAjB,SACGhE,EAAM6B,KAAI,SAACoC,EAAM/G,GAAP,OAET,SAAC,KAAD,CACEoB,QAAS,kBAAM4E,EAAgBe,IAC/B5F,OAAO,UACPG,GAAIyE,IAAiBgB,EAAO,UAAY,UACxCtF,MAAOsE,IAAiBgB,EAAO,QAAU,QACzCnG,GAAI,EACJC,GAAI,EACJC,aAAa,KAPf,UAUE,SAAC,KAAD,UACIiG,EAAKC,YAAkDD,EAAKE,SAAzCzH,EAAUC,EAAYsH,EAAKrH,UAH7CqH,EAAKpH,WAShB,SAAC,EAAD,U,UCrDV,EA/CqB,SAAC,GAAwB,IAAtBe,EAAqB,EAArBA,KAAMsB,EAAe,EAAfA,SAC5B,GAAoCkB,EAAAA,EAAAA,MAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAExB,OACE,UAAC,WAAD,WACGrB,GACC,iBAAMZ,QAASgC,EAAf,SAAwBpB,KAExB,SAAC,KAAD,CAAYL,EAAG,CAAE2E,KAAM,QAAUY,MAAM,SAAC,KAAD,IAAc9F,QAASgC,KAEhE,UAAC,KAAD,CAAOtB,KAAK,KAAKuB,QAASA,EAASF,OAAQA,EAAQ2B,YAAU,EAA7D,WACE,SAAC,KAAD,KACA,UAAC,KAAD,CAAc+B,EAAE,QAAQvF,GAAG,aAA3B,WACE,SAAC,KAAD,CACEL,SAAS,OACT8D,WAAW,YACXpD,EAAE,OACFqD,eAAe,SACfmC,WAAW,OACX1F,MAAM,aANR,SAQGf,EAAKd,QAER,SAAC,KAAD,KACA,UAAC,KAAD,CACE+B,EAAE,OACFsD,QAAQ,SACRrD,WAAW,SACXoD,eAAe,gBAJjB,WAME,SAAC,KAAD,CAAQlD,KAAK,MAAMlC,KAAMc,EAAKd,KAAMwH,YAAY,QAAQX,YAAY,MAAMnF,GAAG,aAAaG,MAAM,WAChG,UAAC,KAAD,CACER,SAAU,CAAEqF,KAAM,OAAQC,GAAI,QAAUY,WAAW,OAAO1F,MAAM,aAChEsD,WAAW,YAFb,oBAIUrE,EAAKqB,aAGjB,SAAC,KAAD,WACE,SAAC,KAAD,CAAQX,QAASiC,EAASnC,YAAY,MAAtC,+B,oBCJZ,EAzCuB,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAEhBY,GAAUkC,EAAAA,EAAAA,YAAWC,EAAAA,GAArBnC,KAER,OACE,SAAC,IAAD,UACGZ,GACCA,EAAS6E,KAAI,SAACV,EAASjE,GAAV,OACX,iBAAKqH,MAAO,CAAEC,QAAS,QAAvB,WACIjH,EAAaP,EAAUmE,EAASjE,EAAGU,EAAKf,MACxCY,EAAcT,EAAUE,EAAGU,EAAKf,QAChC,SAAC,IAAD,CAAS4H,MAAOtD,EAAQ9D,OAAOP,KAAM4H,UAAU,eAAeC,UAAQ,EAAtE,UACE,SAAC,KAAD,CACEC,GAAG,MACH7F,GAAI,EACJC,KAAK,KACLX,OAAO,UACPvB,KAAMqE,EAAQ9D,OAAOP,UAI3B,iBACEyH,MAAO,CACLM,gBAAgB,GAAD,OACb1D,EAAQ9D,OAAOR,MAAQe,EAAKf,IAAM,UAAY,WAEhDiI,WAAY/H,EAAmBC,EAAUmE,EAASjE,EAAGU,EAAKf,KAC1DkI,UAAWzH,EAAWN,EAAUmE,EAASjE,EAAGU,EAAKf,KAAO,EAAI,GAC5DmB,aAAc,OACdgH,QAAS,WACTC,SAAU,OATd,SAYG9D,EAAQ+D,YAzByB/D,EAAQtE,WCuRxD,EAnR6B,SAAC,GAAmD,IAAhDkG,EAA+C,EAA/CA,WAAYoC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cAE1D,GAAoChF,EAAAA,EAAAA,MAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAExB,GAA0CpB,EAAAA,EAAAA,YAA1C,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAwCN,EAAAA,EAAAA,UAAS,IAAjD,eAAOO,EAAP,KAAqBC,EAArB,KACA,GAA8BR,EAAAA,EAAAA,WAAS,GAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KACA,GAA0CV,EAAAA,EAAAA,WAAS,GAAnD,eAAOkG,EAAP,KAAsBC,EAAtB,KAEMpF,GAAQC,EAAAA,EAAAA,MAEd,GAAgDL,EAAAA,EAAAA,YAAWC,EAAAA,GAAnDkD,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBtF,EAAvC,EAAuCA,KAGjC4C,EAAY,mCAAG,WAAOC,GAAP,8EAEnBhB,EAAUgB,GACLA,EAHc,iEAQjBZ,GAAW,GACLa,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYhD,EAAKiD,SAV1B,SAaMC,IAAAA,IAAA,2BAA8BtB,GAAUkB,GAb9C,gBAaTK,EAbS,EAaTA,KAERC,QAAQC,IAAIF,EAAM,wBAClBlB,GAAW,GACXF,EAAgBoB,GAjBC,kDAqBjBC,QAAQC,IAAI,KAAME,SAClBjB,EAAM,CACJkB,MAAO,iBACPC,YAAa,oCACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZ5B,GAAW,GA9BM,0DAAH,sDAkCZ0F,EAAY,mCAAG,2FACdnG,EADc,iEAIjBkG,GAAiB,GACX5E,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYhD,EAAKiD,SAN5B,SASMC,IAAAA,IAAA,mBAErB,CACE0E,OAAQvC,EAAapG,IACrBsH,SAAU/E,GAEZsB,GAfe,gBASTK,EATS,EASTA,KASRC,QAAQC,IAAIF,EAAKlE,IAAKkE,EAAM,gCAE5BmC,EAAgBnC,GAChBoE,GAAepC,GACfuC,GAAiB,GAtBA,kDAyBjBpF,EAAM,CACJkB,MAAO,iBACPC,YAAa,KAAMU,SAAShB,KAAKI,QACjCG,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ6D,GAAiB,GAjCA,QAmCnBjG,EAAiB,IAnCE,0DAAH,qDAsCZoG,EAAa,mCAAG,WAAOC,GAAP,+EAEhBzC,EAAarG,MAAM+I,MAAK,SAACC,GAAD,OAAkBA,EAAa/I,MAAQ6I,EAAc7I,OAF7D,uBAGlBqD,EAAM,CACJkB,MAAO,yBACPE,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WARM,6BAahBwB,EAAa4C,WAAWhJ,MAAQe,EAAKf,IAbrB,uBAclBqD,EAAM,CACJkB,MAAO,+BACPE,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAnBM,0CAyBlB5B,GAAW,GACLa,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYhD,EAAKiD,SA3BzB,UA8BKC,IAAAA,IAAA,qBAErB,CACE0E,OAAQvC,EAAapG,IACrBM,OAAQuI,EAAc7I,KAExB6D,GApCgB,iBA8BVK,EA9BU,EA8BVA,KASRmC,EAAgBnC,GAChBC,QAAQC,IAAIF,EAAM,4BAElBoE,GAAepC,GACflD,GAAW,GA3CO,kDA+ClBmB,QAAQC,IAAI,KAAME,SAElBjB,EAAM,CACJkB,MAAO,iBACPC,YAAa,KAAMU,SAAShB,KAAKI,QACjCG,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ5B,GAAW,GAzDO,QA2DpBR,EAAiB,IA3DG,0DAAH,sDA8DbyG,GAAY,mCAAG,WAAOC,GAAP,8EAEf9C,EAAa4C,WAAWhJ,MAAQe,EAAKf,KAAOkJ,EAAgBlJ,MAAQe,EAAKf,IAF1D,uBAGjBqD,EAAM,CACJkB,MAAO,kCACPE,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WARK,0CAcjB5B,GAAW,GACLa,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYhD,EAAKiD,SAhB1B,SAmBMC,IAAAA,IAAA,wBAErB,CACE0E,OAAQvC,EAAapG,IACrBM,OAAQ4I,EAAgBlJ,KAE1B6D,GAzBe,gBAmBTK,EAnBS,EAmBTA,KASRgF,EAAgBlJ,MAAQe,EAAKf,IAAMqG,IAAoBA,EAAgBnC,GAGvEoE,GAAepC,GACfqC,IACAvF,GAAW,GAjCM,kDAoCjBmB,QAAQC,IAAI,KAAME,SAClBjB,EAAM,CACJkB,MAAO,iBACPC,YAAa,KAAMU,SAAShB,KAAKI,QACjCG,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ5B,GAAW,GA7CM,QA+CnBR,EAAiB,IA/CE,0DAAH,sDAkDlB,OACE,iCACE,SAAC,KAAD,CAAYR,EAAG,CAAE2E,KAAM,QAAUY,MAAM,SAAC,KAAD,IAAc9F,QAASgC,KAE9D,UAAC,KAAD,CAAOC,QAASA,EAASF,OAAQA,EAAQ2B,YAAU,EAAnD,WACE,SAAC,KAAD,KACA,UAAC,KAAD,YACE,SAAC,KAAD,CACE7D,SAAS,OACT8D,WAAW,YACXpD,EAAE,OACFqD,eAAe,SAJjB,SAMGe,EAAakB,YAGhB,SAAC,KAAD,KACA,UAAC,KAAD,CAAWtF,EAAE,OAAOsD,QAAQ,SAASrD,WAAW,SAAhD,WACE,SAAC,KAAD,CAAKF,EAAE,OAAOC,EAAE,OAAO4D,SAAS,OAAOmB,GAAI,EAA3C,SACGX,EAAarG,MAAMiF,KAAI,SAACmE,GAAD,OACtB,SAAC,EAAD,CAEEpI,KAAMoI,EACNrI,MAAOsF,EAAa4C,WACpBhI,eAAgB,kBAAMiI,GAAaE,KAH9BA,EAAEnJ,WAOb,UAAC,KAAD,CAAagC,EAAE,OAAf,WACE,SAAC,KAAD,CACEuD,YAAY,YACZnE,GAAI,EACJuE,MAAOpD,EACPiD,SAAU,SAACC,GAAD,OAAOjD,EAAiBiD,EAAEC,OAAOC,WAE7C,SAAC,KAAD,CACEtE,QAAQ,QACRE,YAAY,OACZ6H,GAAI,EACJC,UAAWb,EACX/G,QAASiH,EALX,wBAUF,SAAC,KAAD,WACE,SAAC,KAAD,CACEnD,YAAY,oBACZnE,GAAI,EACJoE,SAAU,SAACC,GAAD,OAAO9B,EAAa8B,EAAEC,OAAOC,YAI1C5C,GACC,SAAC,IAAD,CAASZ,KAAK,OADR,OAGNU,QAHM,IAGNA,OAHM,EAGNA,EAAcmC,KAAI,SAACsE,GAAD,OAChB,SAAC,EAAD,CAEEvI,KAAMuI,EACNtI,eAAgB,kBAAM4H,EAAcU,KAF/BA,EAAqBtJ,YAOlC,SAAC,KAAD,WACE,SAAC,KAAD,CAAQyB,QAAS,kBAAMwH,GAAalI,IAAOQ,YAAY,MAAvD,qC,o6ITJZ,EAtQmB,SAAC,GAAmC,IAAjC2E,EAAgC,EAAhCA,WAAYoC,EAAoB,EAApBA,cAChC,GAAgChG,EAAAA,EAAAA,UAAS,IAAzC,eAAOnC,EAAP,KAAiBoJ,EAAjB,KACA,GAA8BjH,EAAAA,EAAAA,WAAS,GAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KACA,GAAoCV,EAAAA,EAAAA,UAAS,IAA7C,eAAOkH,EAAP,KAAmBC,EAAnB,KACA,GAA8CnH,EAAAA,EAAAA,WAAS,GAAvD,eAAOoH,EAAP,KAAwBC,EAAxB,KACA,GAA4BrH,EAAAA,EAAAA,WAAS,GAArC,eAAOsH,EAAP,KAAeC,EAAf,KACA,GAAgCvH,EAAAA,EAAAA,WAAS,GAAzC,eAAOwH,EAAP,KAAiBC,EAAjB,KAEM1G,GAAQC,EAAAA,EAAAA,MAEd,GAA+EL,EAAAA,EAAAA,YAAWC,EAAAA,GAAlFkD,EAAR,EAAQA,aAAcC,GAAtB,EAAsBA,gBAAiBtF,GAAvC,EAAuCA,KAAMiJ,GAA7C,EAA6CA,aAAcC,GAA3D,EAA2DA,gBAGrDC,GAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,EACfC,iBAAkB,CAChBC,oBAAqB,mBAInBhC,GAAa,mCAAG,2FACfnC,EADe,iEAIZvC,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYhD,GAAKiD,SAG3ChB,GAAW,GARO,SAUKiB,IAAAA,IAAA,uBACLmC,EAAapG,KAC7B6D,GAZgB,gBAUVK,EAVU,EAUVA,KAKRqF,EAAYrF,GACZlB,GAAW,GACXmB,QAAQC,IAAIF,EAAM,+CAElBvE,EAAO6K,KAAK,YAAapE,EAAapG,KAnBpB,kDAqBlBmE,QAAQC,IAAI,KAAME,SAClBjB,EAAM,CACJkB,MAAO,iBACPC,YAAa,8BACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA5BM,0DAAH,qDAiCb6F,GAAW,mCAAG,WAAOC,GAAP,8EACA,UAAdA,EAAMC,MAAmBnB,EADX,wBAGhB7J,EAAO6K,KAAK,cAAepE,EAAapG,KAHxB,SAMR6D,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OAAYhD,GAAKiD,SAMlCyF,EAAc,IAfA,SAiBSxF,IAAAA,KACrB,eACA,CACEoE,QAASmB,EACTb,OAAQvC,GAEVvC,GAvBY,gBAiBNK,EAjBM,EAiBNA,KAURvE,EAAO6K,KAAK,cAAetG,GAE3BqF,EAAY,GAAD,eAAKpJ,GAAL,CAAe+D,KAC1BC,QAAQC,IAAIF,EAAM,8BA9BJ,kDAgCdC,QAAQC,IAAI,KAAME,SAClBjB,EAAM,CACJkB,MAAO,iBACPC,YAAa,6BACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAvCE,0DAAH,uDA6CjB2B,EAAAA,EAAAA,YAAU,YACR5G,GAASiL,EAAAA,EAAAA,IAxGI,mCAyGNJ,KAAK,QAASzJ,IACrBpB,EAAOkL,GAAG,aAAa,kBAAMlB,GAAmB,MAChDhK,EAAOkL,GAAG,UAAU,kBAAMd,GAAY,MACtCpK,EAAOkL,GAAG,eAAe,kBAAMd,GAAY,QAG1C,KAEHxD,EAAAA,EAAAA,YAAU,WACRgC,KAIA3I,EAAsBwG,IAGrB,CAACA,KAIJG,EAAAA,EAAAA,YAAU,WACR5G,EAAOkL,GAAG,oBAAoB,SAACC,GACvBlL,GAAuBA,EAAoBI,MAAQ8K,EAAmB1D,KAAKpH,IAS/EuJ,EAAY,GAAD,eAAKpJ,GAAL,CAAe2K,KANrBd,GAAa/D,SAAS6E,KACzBb,GAAgB,CAACa,GAAF,eAAyBd,MACxC1B,GAAepC,GACf/B,QAAQC,IAAI4F,GAAc,uCAQlC,IC1J4BlK,GAAYC,GDmLxC,OACE,8BACGqG,GACC,iCACE,UAAC,KAAD,CACE9E,SAAU,CAAEqF,KAAM,OAAQC,GAAI,QAC9BG,GAAI,EACJ9F,GAAI,EACJc,EAAE,OACFqD,WAAW,YACXpD,EAAE,OACFqD,eAAgB,CAAEsB,KAAM,iBACxB1E,WAAW,SARb,WAUE,SAAC,KAAD,CACED,EAAG,CAAE2E,KAAM,OAAQC,GAAI,QACvBW,MAAM,SAAC,KAAD,IACN9F,QAAS,kBAAM4E,GAAgB,OAEhClG,IAAaiG,EAAaiB,aACzB,gCACGxH,EAAUkB,GAAMqF,EAAarG,QAC9B,SAAC,EAAD,CAAcgB,MCzMAjB,GDyMoBiB,GCzMRhB,GDyMcqG,EAAarG,MCvM5DA,GAAM,GAAGC,MAAQF,GAAWE,IAAMD,GAAM,GAAKA,GAAM,UD0M9C,gCACGqG,EAAakB,SAASyD,eACvB,SAAC,EAAD,CACE7E,WAAYA,EACZoC,cAAeA,EACfC,cAAeA,YAKvB,UAAC,KAAD,CACEvG,EAAE,OACFsD,QAAQ,SACRD,eAAe,WACfwB,EAAG,EACHlF,GAAG,UACHI,EAAE,OACFmF,EAAE,OACF/F,aAAa,KACbgG,UAAU,SATZ,UAWGpE,GACC,SAAC,IAAD,CACEZ,KAAK,KACLJ,EAAG,GACHmF,EAAG,GACH8D,UAAU,SACVC,OAAO,UAGT,gBAAKC,UAAU,WAAf,UACE,SAAC,EAAD,CAAgB/K,SAAUA,OAI9B,UAAC,KAAD,CACEgL,UAAWV,GACXW,GAAG,aACHC,YAAU,EACVtD,GAAI,EAJN,UAMG+B,GACC,0BACE,SAAC,IAAD,CACEwB,QAASpB,GACTrJ,OAAQ,GACR0K,MAAO,GACP7D,MAAO,CAAE8D,aAAc,GAAIvD,WAAY,QAI3C,yBAEF,SAAC,KAAD,CACE5G,QAAQ,SACRM,GAAG,UACH4D,YAAY,oBACZI,MAAO6D,EACPhE,SA5GQ,SAACC,GAIrB,GAHAgE,EAAchE,EAAEC,OAAOC,OAGlB+D,EAAL,CAEKE,IACHC,GAAU,GACVlK,EAAO6K,KAAK,SAAUpE,EAAapG,MAIrC,IAAIyL,GAAiB,IAAIC,MAAOC,UAGhCC,YAAW,YACK,IAAIF,MAAOC,UACAF,GAJT,KAKe7B,IAC7BjK,EAAO6K,KAAK,cAAepE,EAAapG,KACxC6J,GAAU,MAPI,mBAqGd,SAAC,KAAD,CAAK7H,EAAE,OAAOC,WAAW,SAASoD,eAAe,SAAS6B,EAAE,OAA5D,UACE,SAAC,KAAD,CAAM5F,SAAS,MAAMyF,GAAI,EAAG3B,WAAW,YAAvC,oDUzPV,EApBgB,SAAC,GAAmC,IAAjCc,EAAgC,EAAhCA,WAAYoC,EAAoB,EAApBA,cAErBlC,GAAiBnD,EAAAA,EAAAA,YAAWC,EAAAA,GAA5BkD,aAER,OACE,SAAC,KAAD,CACEpE,EAAG,CAAE2E,KAAMP,EAAe,OAAS,OAAQQ,GAAI,QAC/C3E,WAAW,SACXqD,QAAQ,SACRuB,EAAG,EACHlF,GAAG,QACHI,EAAG,CAAE4E,KAAM,OAAQC,GAAI,OACvBzF,aAAa,KACb2F,YAAY,MARd,UAUE,SAAC,EAAD,CAAYZ,WAAYA,EAAYoC,cAAeA,O,8BCsNzD,EA1MmB,WACjB,OAA4BhG,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAwCN,EAAAA,EAAAA,UAAS,IAAjD,eAAOO,EAAP,KAAqBC,EAArB,KACA,GAA8BR,EAAAA,EAAAA,WAAS,GAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KACA,GAAsCV,EAAAA,EAAAA,WAAS,GAA/C,eAAOuJ,EAAP,KAAoBC,EAApB,KAEA,GAAkF7I,EAAAA,EAAAA,YAAWC,EAAAA,GAArFnC,EAAR,EAAQA,KAAMsF,EAAd,EAAcA,gBAAiBlD,EAA/B,EAA+BA,MAAOC,EAAtC,EAAsCA,SAAU4G,EAAhD,EAAgDA,aAAcC,EAA9D,EAA8DA,gBAExD8B,GAAWC,EAAAA,EAAAA,MACX3I,GAAQC,EAAAA,EAAAA,MAEd,GAAoCC,EAAAA,EAAAA,MAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAOlBC,GAAY,mCAAG,2FAEdhB,EAFc,uBAGjBU,EAAM,CACJkB,MAAO,mCACPE,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,aARK,0CAcjB5B,GAAW,GAELa,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYhD,EAAKiD,SAjB1B,SAoBMC,IAAAA,IAAA,2BAA8BtB,GAAUkB,GApB9C,gBAoBTK,EApBS,EAoBTA,KAGRlB,GAAW,GACXF,EAAgBoB,GAxBC,kDA4BjBC,QAAQC,IAAI,KAAME,SAClBjB,EAAM,CACJkB,MAAO,iBACPC,YAAa,oCACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAnCK,0DAAH,qDA2CZqH,GAAoB,mCAAG,WAAO3L,GAAP,2FAIzBwL,GAAe,GACTjI,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OAAYhD,EAAKiD,SART,SAWFC,IAAAA,KAAA,YAAwB,CAAE3D,OAAAA,GAAUuD,GAXlC,gBAWjBK,EAXiB,EAWjBA,KAEHf,EAAM2F,MAAK,SAAC1B,GAAD,OAAUA,EAAKpH,MAAQkE,EAAKlE,QAAMoD,EAAS,CAACc,GAAF,eAAWf,KAGrEkD,EAAgBnC,GAEhBC,QAAQC,IAAIF,EAAM,0CAElB4H,GAAe,GACfpI,IArByB,kDAwBzBS,QAAQC,IAAI,KAAME,SAClBjB,EAAM,CACJkB,MAAO,0BACPC,YAAa,KAAMF,QACnBG,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBA/Ba,0DAAH,sDAoC1B,OACE,UAAC,WAAD,YACE,UAAC,KAAD,CACE5C,EAAE,OACFqD,eAAe,gBACfpD,WAAW,SACXF,EAAE,OACF8E,EAAE,oBACFC,YAAY,MACZW,YAAY,aACZ9F,GAAG,aACHG,MAAM,QATR,WAWE,SAAC,IAAD,CAAS8F,MAAM,uBAAuBE,UAAQ,EAACD,UAAU,aAAzD,UACE,UAAC,KAAD,CAAQxG,QAAQ,QAAQM,GAAI,WAAWF,QAASgC,EAAQ3B,MAAM,QAC5DF,OAAQ,CAAEC,WAAY,aAAcC,MAAM,cAAgBoK,QAAS,CAAErK,WAAY,aAAcC,MAAM,cADvG,WAEI,cAAGoJ,UAAU,mBACb,SAAC,KAAD,CAAMlJ,EAAG,CAAE2E,KAAM,OAAQC,GAAI,QAAU3F,GAAI,EAAGuG,WAAW,OAAzD,+BAMN,SAAC,KAAD,CAAMlG,SAAS,MAAM8D,WAAW,iBAAiBoC,WAAW,OAAO1F,MAAM,aAAzE,yBAIA,4BACE,UAAC,KAAD,YACE,UAAC,KAAD,CAAY+E,EAAG,EAAf,WACE,SAAC,KAAD,CACEsF,MAAOnC,EAAazJ,OACpB6L,OAAQC,EAAAA,GAAAA,SAEV,SAAC,KAAD,CAAU/K,SAAS,MAAMlB,EAAG,EAAG0B,MAAM,iBAEvC,UAAC,KAAD,CAAUJ,GAAI,EAAd,WACIsI,EAAazJ,QAAU,kBACxByJ,EAAahF,KAAI,SAACsH,GAAD,OAChB,SAAC,KAAD,CAEE7K,QAAS,WACP4E,EAAgBiG,EAAMlF,MACtB6C,EAAgBD,EAAalE,QAAO,SAACyG,GAAD,OAAOA,IAAMD,OAJrD,SAOGA,EAAMlF,KAAKC,YAAX,yBACqBiF,EAAMlF,KAAKE,UADhC,2BAEuBzH,EAAUkB,EAAMuL,EAAMlF,KAAKrH,SAR9CuM,EAAMtM,eAanB,UAAC,KAAD,YACE,SAAC,KAAD,CAAYwM,GAAIC,EAAAA,GAAQ9K,GAAG,WAAYsF,WAAW,SAAC,KAAD,IAChDrF,OAAQ,CAACC,WAAY,aAAcC,MAAM,cAAeoK,QAAS,CAACrK,WAAY,aAAcC,MAAM,cADpG,UAEE,SAAC,KAAD,CAAQK,KAAK,KAAKX,OAAO,UAAUvB,KAAMc,EAAKd,KAAMwH,YAAY,QAAQX,YAAY,MAAMnF,GAAG,aAAaG,MAAM,aAElH,UAAC,KAAD,CAAUH,GAAK,aAAa8F,YAAY,QAAQX,YAAY,MAA5D,WACE,UAAC,EAAD,CAAc/F,KAAMA,EAApB,WACE,SAAC,KAAD,CAAUyG,WAAW,OAAO1F,MAAM,QAAQF,OAAQ,CAACC,WAAY,cAA/D,wBAEY,QAEd,SAAC,IAAD,KACA,SAAC,KAAD,CAAU2F,WAAW,OAAO1F,MAAM,QAAQL,QArJhC,WACpBgF,aAAaiG,WAAW,mBACxBX,EAAS,MAmJmEnK,OAAQ,CAACC,WAAY,cAAvF,iCAOR,UAAC,KAAD,CAAQgG,UAAU,OAAOnE,QAASA,EAASF,OAAQA,EAAnD,WACE,SAAC,KAAD,KACA,UAAC,KAAD,YACE,SAAC,KAAD,CAAcmJ,kBAAkB,MAAhC,2BACA,UAAC,KAAD,YACE,UAAC,KAAD,CAAK3K,EAAE,OAAO+E,GAAI,EAAlB,WACE,SAAC,KAAD,CACExB,YAAY,0BACZrD,GAAI,EACJyD,MAAOhD,EACP6C,SAAU,SAACC,GAAD,OAAO7C,EAAU6C,EAAEC,OAAOC,WAEtC,SAAC,KAAD,CAAQlE,QAASkC,GAAjB,mBAEDZ,GACC,SAAC,EAAD,IADM,OAGNF,QAHM,IAGNA,OAHM,EAGNA,EAAcmC,KAAI,SAACjE,GAAD,OAChB,SAAC,EAAD,CAEEA,KAAMA,EACNC,eAAgB,kBAAMiL,GAAqBlL,EAAKf,OAF3Ce,EAAKf,QAMf6L,IAAe,SAAC,IAAD,CAASzC,GAAG,OAAOpH,EAAE,sBCtMjD,EAtBiB,WACf,OAAoCM,EAAAA,EAAAA,WAAS,GAA7C,eAAO4D,EAAP,KAAmBoC,EAAnB,KACQvH,GAASkC,EAAAA,EAAAA,YAAWC,EAAAA,GAApBnC,KAOR,OACE,iBAAK2G,MAAO,CAAE6D,MAAO,QAArB,UAEOxK,IAAQ,SAAC,EAAD,KACT,UAAC,KAAD,CAAKiB,EAAE,OAAOqD,eAAe,gBAAgBkG,MAAM,OAAOrE,EAAE,SAASL,EAAE,OAAvE,UACG9F,IAAQ,SAAC,EAAD,CAASmF,WAAYA,IAC7BnF,IAAU,SAAC6L,EAAD,CAAS1G,WAAYA,EAAYoC,cAAeA","sources":["components/SingleChat.js","config/ChatLogics.js","components/ChatLoading.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/miscellaneous/UpdateGroupChatModal.js","components/ChatBox.js","components/miscellaneous/SideDrawer.js","Pages/ChatPage.js"],"sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\n//import { useHelper } from '../config/helper-hook';\nimport { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport ChatContext from \"../Context/chat-context\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\n\n//const ENDPOINT = \"http://localhost:5000\"; //development\nconst ENDPOINT = \"https://textalot.herokuapp.com\"; //for deployment -production\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user, notification, setNotification } = useContext(ChatContext);\n  //console.log(selectedChat, \"selectedChat in chatBox\");\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}` },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n\n      setMessages(data);\n      setLoading(false);\n      console.log(data, \"fetched messsages of the selected chat data\");\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      console.log(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        //async func -- wont make newMessage empty instantaneously\n        //ui enhancement -- input to be empty as soon as we hit ender/send\n        setNewMessage(\"\");\n\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n\n        //setNewMessage(\"\");\n        socket.emit(\"new message\", data);\n\n        setMessages([...messages, data]);\n        console.log(data, \"sent message response data\");\n      } catch (error) {\n        console.log(error.message);\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    //whwnever selctedChat changes, fetchAllMessages again for new selectedChat._id\n\n    //just to keep a track\n    selectedChatCompare = selectedChat;\n\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  //console.log(notification, 'notification Bellicon');\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if ( !selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n\n        // if chat is not selected or doesn't match current chat\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain); //updating our chats in our my chats on newMessageRecieved\n          console.log(notification, \"notification bell-icon check\");\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    //typing animation code\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    //debounce/throttle function\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages && !selectedChat.isGroupChat ? (\n              <>\n                {getSender(user, selectedChat.users)}\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\n              </>\n            ) : (\n              <>\n                {selectedChat.chatName.toUpperCase()}\n                <UpdateGroupChatModal\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                />\n              </>\n            )}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    height={40}\n                    width={50}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const getSender = (loggedUser, users) => {\n  //return console.log('id')\n  //1on1 chatName\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\n\nexport const getSenderFull = (loggedUser, users) => {\n  //eye icon ProfileModal\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n\n//separating user's and sender's text in chatbox\nexport const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\n//padding between same user's/sender's texts\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\n//displaying avatar on sender's last message\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\n\n","import React from 'react';\nimport { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ admin, user, handleFunction }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;","import React from 'react';\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\nconst UserListItem = ({user, handleFunction }) => { //user !notLoggedIn //selected to chat userId\n  //const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar mr={2} size=\"sm\" cursor=\"pointer\" name={user.name}/>\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\"> <b>Email : </b> {user.email} </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport ChatContext from \"../../Context/chat-context\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  \n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const { user, chats, setChats } = useContext(ChatContext);\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();  \n  \n\n  const selectedGroupHandler = (userToAdd) => {\n    \n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    \n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}`}\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data, 'users search response from server');\n      \n      setLoading(false);\n      setSearchResult(data);\n\n    } catch (error) {\n\n      console.error(error.message);  \n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((selectedUser) => selectedUser._id !== delUser._id));\n  };\n\n  const submitHandler = async () => {\n\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {/* \"Content-type\": \"application/json\", */ Authorization: `Bearer ${user.token}`}//already body jsonType\n      };\n      \n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((selectedUser) => selectedUser._id)), \n          //server side req.body accepts stringify array of user id\n        },\n        config\n      );\n\n      setChats([data, ...chats]); //recently created chat first\n      console.log(data, 'group chat added/created respopnse');\n      onClose(); //modal close on success\n\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n\n    } catch (error) {\n      \n      console.error(error.message);  \n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: Kohli, Ganguli, Dhoni\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((selectedUser) => (\n                <UserBadgeItem\n                  key={selectedUser._id}\n                  user={selectedUser}\n                  handleFunction={() => handleDelete(selectedUser)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : ( //top 4 results\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => selectedGroupHandler(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={submitHandler} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default GroupChatModal;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport ChatContext from \"../Context/chat-context\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\n//import { useHelper } from '../config/helper-hook';\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = useContext(ChatContext);\n  //const {getSender}=useHelper();\n\n  const toast = useToast();\n  \n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}`}\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n      console.log(data, 'fetching all users chats in my chats');\n\n    } catch (error) {\n\n      console.log(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInformation\"))); //chatLogics \n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n  //fetching chats again witht the updated list of all of our chats...\n  //--when we leave a group our updated list of chats needs to be fetched again\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat, i) => (\n              \n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName}\n                </Text>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import React from 'react';\nimport { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Avatar } from \"@chakra-ui/avatar\";\n\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <React.Fragment>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered >\n        <ModalOverlay />\n        <ModalContent h=\"380px\" bg=\"purple.800\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n            fontWeight=\"bold\"\n            color=\"yellow.400\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Avatar size=\"2xl\" name={user.name} borderColor=\"black\" borderWidth=\"2px\" bg=\"yellow.400\" color=\"black\"/>\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }} fontWeight=\"bold\" color=\"yellow.400\"\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose} colorScheme='red'>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default ProfileModal;","import React, {useContext} from 'react';\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport ChatContext from \"../Context/chat-context\";\n\nconst ScrollableChat = ({ messages }) => {\n\n  const { user } =  useContext(ChatContext);\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((message, i) => (\n          <div style={{ display: \"flex\" }} key={message._id}>\n            {(isSameSender(messages, message, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={message.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={message.sender.name}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  message.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, message, i, user._id),\n                marginTop: isSameUser(messages, message, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {message.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState, useContext } from \"react\";\nimport ChatContext from \"../../Context/chat-context\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({  fetchAgain, setFetchAgain, fetchMessages }) => {\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameLoading, setRenameLoading] = useState(false);\n\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = useContext(ChatContext);\n\n\n  const handleSearch = async (query) => {\n\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}`}\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      console.log(data, 'user search response');\n      setLoading(false);\n      setSearchResult(data);\n\n    } catch (error) {\n      \n      console.log(error.message)  \n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = { \n          headers: { Authorization: `Bearer ${user.token}`}\n        };\n\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName, //local state\n        },\n        config\n      );\n\n      console.log(data._id, data, \"renaming group chat resposne\");\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain); //window.location.reload()\n      setRenameLoading(false);\n\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\"); //reseting the new name field \n  };\n\n  const handleAddUser = async (userToBeAdded) => {\n\n    if (selectedChat.users.find((existingUser) => existingUser._id === userToBeAdded._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) { //admin is not loggedIn user clause\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}`},\n      };\n\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: userToBeAdded._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      console.log(data, 'added user data response');\n\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n\n    } catch (error) {\n\n      console.log(error.message);\n\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (userToBeRemoved) => {\n\n    if (selectedChat.groupAdmin._id !== user._id && userToBeRemoved._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}` },\n      };\n\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: userToBeRemoved._id,\n        },\n        config\n      );\n\n      userToBeRemoved._id === user._id ? setSelectedChat() : setSelectedChat(data); \n      //leaveGroup clause //self UserBadgeItem cross\n\n      setFetchAgain(!fetchAgain);\n      fetchMessages(); //prop passsed down from singlechat //opt \n      setLoading(false);\n    } catch (error) {\n        \n      console.log(error.message);  \n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameLoading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((selectedSearcheduser) => (\n                <UserListItem\n                  key={selectedSearcheduser._id}\n                  user={selectedSearcheduser}\n                  handleFunction={() => handleAddUser(selectedSearcheduser)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;","import React, {useContext} from 'react';\n\nimport { Box } from \"@chakra-ui/layout\";\n//import \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport ChatContext from '../Context/chat-context';\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n\n  const { selectedChat } = useContext(ChatContext);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import React, { useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport ChatContext from \"../../Context/chat-context\";\nimport ProfileModal from \"./ProfileModal\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport { Input, Spinner } from \"@chakra-ui/react\";\nimport ChatLoading from \"../ChatLoading\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\n\n\nconst SideDrawer = () => {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const { user, setSelectedChat, chats, setChats, notification, setNotification } = useContext(ChatContext);\n\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInformation\");\n    navigate(\"/\");\n  };\n\n  const handleSearch = async() => {\n\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: { Authorization: `Bearer ${user.token}`}\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      //console.log(data, 'searchQuerry keyword response data');\n\n      setLoading(false);\n      setSearchResult(data);\n\n    } catch (error) {\n\n      console.log(error.message);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n\n  \n\n  const accessChatCreateChat = async (userId) => {\n    //console.log(userId); id of selected user\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((chat) => chat._id === data._id)) setChats([data, ...chats]); \n      //already existing check clause //newly created chat above the rest\n\n      setSelectedChat(data);\n\n      console.log(data, 'access new/existing chat response data');\n\n      setLoadingChat(false);\n      onClose(); //drawer close afterwards\n    } catch (error) {\n\n      console.log(error.message);\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n        borderColor=\"purple.600\"\n        bg=\"yellow.400\"\n        color=\"black\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" bg ='blue.700' onClick={onOpen} color=\"white\"\n            _hover={{ background: \"purple.800\", color:\"yellow.400\" }} _active={{ background: \"purple.800\", color:\"yellow.400\" }}>\n              <i className=\"fas fa-search\"></i>\n              <Text d={{ base: \"none\", md: \"flex\" }} px={4} fontWeight=\"bold\">\n                Search User\n              </Text>\n          </Button>\n        </Tooltip>\n\n        <Text fontSize=\"3xl\" fontFamily=\"Work sans bold\" fontWeight='bold' color=\"purple.700\" >\n          Text-A-Lot\n        </Text>\n\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} color=\"blue.700\"/>\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"blue.700\"  rightIcon={<ChevronDownIcon/>}  \n              _hover={{background: \"purple.800\", color:\"yellow.400\"}} _active={{background: \"purple.800\", color:\"yellow.400\"}}>\n              <Avatar size=\"sm\" cursor=\"pointer\" name={user.name} borderColor=\"black\" borderWidth=\"2px\" bg=\"yellow.400\" color=\"black\"/>\n            </MenuButton>\n            <MenuList bg = \"purple.600\" borderColor=\"black\" borderWidth=\"2px\">\n              <ProfileModal user={user}>\n                <MenuItem fontWeight=\"bold\" color=\"black\" _hover={{background: \"yellow.400\"}}  >\n                  My Profile\n                </MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider/>\n              <MenuItem fontWeight=\"bold\" color=\"black\" onClick={logoutHandler} _hover={{background: \"yellow.400\"}}>\n                Logout\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => ( //user clicked on for chat\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChatCreateChat(user._id)}\n                />\n              ))\n            )} \n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default SideDrawer;\n","import React, { useState, useContext} from \"react\";\nimport ChatContext from \"../Context/chat-context\";\nimport MyChats from '../components/MyChats';\nimport ChatBox from '../components/ChatBox';\nimport SideDrawer from '../components/miscellaneous/SideDrawer';\nimport { Box } from '@chakra-ui/react';\n\n\nconst ChatPage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = useContext(ChatContext);\n\n  /*  const navigate = useNavigate();\n  const isRefreshingRef = useIsRefreshingRef() */\n\n  //navigate('/chats');\n\n  return (\n    <div style={{ width: \"100%\" }}>\n     \n          {user && <SideDrawer />}\n          <Box d=\"flex\" justifyContent=\"space-between\" width=\"100%\" h=\"90.5vh\" p=\"12px\">\n            {user && <MyChats fetchAgain={fetchAgain} />}\n            {user && ( <ChatBox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />)}\n          </Box>\n      \n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"names":["socket","selectedChatCompare","getSender","loggedUser","users","_id","name","isSameSenderMargin","messages","m","i","userId","length","sender","isSameUser","isSameSender","undefined","isLastMessage","height","admin","user","handleFunction","px","py","borderRadius","mb","variant","fontSize","colorScheme","cursor","onClick","pl","bg","_hover","background","color","w","d","alignItems","mr","size","email","children","useState","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","loading","setLoading","useContext","ChatContext","chats","setChats","toast","useToast","useDisclosure","isOpen","onOpen","onClose","handleSearch","query","config","headers","Authorization","token","axios","data","console","log","error","message","title","description","status","duration","isClosable","position","submitHandler","JSON","stringify","map","selectedUser","response","isCentered","fontFamily","justifyContent","flexDir","placeholder","onChange","e","target","value","flexWrap","delUser","filter","slice","userToAdd","includes","fetchAgain","setLoggedUser","selectedChat","setSelectedChat","fetchChats","useEffect","parse","localStorage","getItem","base","md","p","borderWidth","pb","lg","rightIcon","h","overflowY","chat","isGroupChat","chatName","icon","fontWeight","borderColor","style","display","label","placement","hasArrow","mt","backgroundColor","marginLeft","marginTop","padding","maxWidth","content","setFetchAgain","fetchMessages","renameLoading","setRenameLoading","handleRename","chatId","handleAddUser","userToBeAdded","find","existingUser","groupAdmin","handleRemove","userToBeRemoved","u","ml","isLoading","selectedSearcheduser","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","notification","setNotification","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","toUpperCase","alignSelf","margin","className","onKeyDown","id","isRequired","options","width","marginBottom","lastTypingTime","Date","getTime","setTimeout","loadingChat","setLoadingChat","navigate","useNavigate","accessChatCreateChat","_active","count","effect","Effect","notif","n","as","Button","removeItem","borderBottomWidth","ChatBox"],"sourceRoot":""}